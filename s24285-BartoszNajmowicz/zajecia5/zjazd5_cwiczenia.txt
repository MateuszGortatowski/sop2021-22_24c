Cwiczenie 1

#include <iostream>
#include <sys/types.h>
#include <unistd.h>

using namespace std;

int main()
{
	int PID = getpid(), PPID = getppid(), x=0;

	cout << "PID = " << PID << endl;
	cout << "Parent PID = " << PPID << endl;
	cout << "Podaj liczbe calkowita: ";
	cin >> x;
	return 0;
}



Cwiczenie 2

#include <iostream>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>

using namespace std;

int main()
{
	int PID = getpid(), podproces = fork();

	if (podproces > 0) {
		cout << "PPID = " <<  getpid() << endl;
		cout << "Parent Parent PID = " << getppid() << endl;
	} else {
		cout << "Child PID = " << getpid() << endl;
		cout << "Child Parent PID = " << getppid() << endl;
	}

	if (PID == getpid()) waitpid(0, 0, 0);

	return 0;
}



Cwiczenie 3

#include <iostream>
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>

using namespace std;

int main(int argc, char* argv[])
{
        int liczba, wynik = 0, podproces = fork();
        sscanf (argv[1],"%d",&liczba);

        if (podproces > 0) {
                waitpid(0, 0, 0);
                for (int i = 0; i <= liczba; i++) {
                        wynik += i;
                }

                cout << "Suma liczb od 0 do " << liczba << " wynosi: "  << wynik << endl;
        } else {
                for (int i = 0; i <= liczba; i++) {
                        if (i % 2 == 1) 
				cout << "Liczba nieparzysta: " <<  i << endl;
                }
        }

        return 0;
}


Cwiczenie 4

#include <iostream>
#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

using namespace std;

int dzieciorob(int , int );

int main() {
	return dzieciorob(0, 100);
}

int dzieciorob(int dol, int gora) {
    
   	if (dol <= gora) { 
    		cout << "Potomek " << dol << " = " << "PID: " << getpid() << ", PPID: " << getppid() << endl;
      		pid_t PID = fork();

      		if (PID == -1) {
        		return 1;
      		} else if (PID == 0) {
        		return dzieciorob(dol + 1, gora);
      		}

  	}
   
  	wait(0);
  	wait(0);
  	
	return 0;
}



Cwiczenie 5

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>

using namespace std;

int main() {
	int i;
    	for (i = 0; i <= 100; i++) {
        	if (fork() == 0) {
           		cout << "Potomek " << i << "., " << "PID potomka: " << getpid() << ", PPID: " << getppid() << endl;
            		return 0;
        	}
	
		wait(0);
    	}

    	for (i = 0; i <= 100; i++) {
        	waitpid(0, 0, 0);
    	}

    	return 0;
}




Praca domowa

#include <iostream>
#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

using namespace std;

int dzieciorob(int, int, int);

int main(void) {
	return dzieciorob(0, 2, 2);
}

int dzieciorob(int i, int n, int liczbaDzieci) {
	if (i < n) {
    		cout << "Warstwa " << i << ", PID: " << getpid() << ", PPID: " << getppid() << endl;	
		
    		for (int j = 0; j < liczbaDzieci; j++) {
      			pid_t PID = fork();

      			if (PID == -1) {
        			return 1;
      			} else if (PID == 0) {
        			return dzieciorob(i + 1, n, liczbaDzieci);
      			}
    		}

  	} else {
    		cout << "Warstwa: " << i << ", PID: " << getpid() << ", PPID: " << getppid() << endl;
  	}
  
	wait(0);
  	wait(0);
 	return 0;
}






